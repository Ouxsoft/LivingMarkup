<?php
/**
 * This file is part of the LivingMarkup package.
 *
 * (c) Matthew Heroux <matthewheroux@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace LivingMarkup\Tests;

use PHPUnit\Framework\TestCase;
use LivingMarkup\Builder\DynamicPageBuilder;
use LivingMarkup\Builder\StaticPageBuilder;
use LivingMarkup\Kernel;

// require examples Module
// TODO: automate
require __DIR__ . '/../examples/HelloWorld/HelloWorld.php';
require __DIR__ . '/../examples/Bitwise/Bitwise.php';
require __DIR__ . '/../examples/WebsiteSpoofing/MarkupInjection.php';
require __DIR__ . '/../examples/Variable/UserProfile.php';
require __DIR__ . '/../examples/Variable/GroupProfile.php';

define('LHTML_DATETIME', '2019-12-03 01:30:00');

final class ExamplesTest extends TestCase
{
    private $excluded_examples = [
        'Autoloader',
        'Bitwise',
        'DynamicPage',
        'HeadAndFooter',
        'HelloWorld',
        'IfStatement',
        'Images',
        'Redact',
        'WebsiteSpoofing'
    ];

    public function test()
    {

        // get example folders
        $example_folders = glob(__DIR__ . '/../examples/*', GLOB_ONLYDIR);

        // go through each folder
        foreach ($example_folders as $example_folder) {
            if ($this->isExcluded($example_folder)) {
                continue;
            }

            // build dynamic example
            $command = 'php ' . $example_folder . DIRECTORY_SEPARATOR . 'input.php';
            $page_results = shell_exec($command);

            // build static page of the prebuild desired output
            $kernel = new Kernel();
            $static_builder = new StaticPageBuilder();
            $config = [];
            $config['filename'] = $example_folder . DIRECTORY_SEPARATOR . 'output.html';
            $page_check = (string)$kernel->build($static_builder, $config);

            // compare the two
            $this->assertEquals($page_check, $page_results);
        }
    }

    public function isExcluded($example_folder)
    {
        foreach ($this->excluded_examples as $exclude_example) {
            if ($this->endsWith($example_folder, basename($exclude_example))) {
                return true;
            }
        }
    }

    public function endsWith($haystack, $needle)
    {
        $length = strlen($needle);
        if ($length == 0) {
            return true;
        }

        return (substr($haystack, -$length) === $needle);
    }
}
